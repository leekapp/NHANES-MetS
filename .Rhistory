p<- ggplot(data = df, mapping = aes(x = `Age (years)`, fill = Triglyceride_Level)) +
geom_density(aes(y=..count..), alpha = 0.5) +
labs(title = "Age by Triglyceride Level", x = "Age") +
scale_fill_manual(values = c("yellow","green", "red", "orange", "black"))+
theme_light()
p + facet_wrap(vars(Gender))
p<- ggplot(data = df, mapping = aes(x = `Age (years)`, fill = Hypercholesterolemia)) +
geom_density(aes(y=..count..), alpha = 0.5) +
labs(title = "Age by Cholesterol Level", x = "Age") +
scale_fill_manual(values = c("yellow","green", "red"))+
theme_light()
p + facet_wrap(vars(Gender))
p<- ggplot(data = df, mapping = aes(x = `Age (years)`, y = BMI, color = Blood_Sugar)) +
geom_point() +
labs(title = "BMI by Age", x = "Age", y = "BMI") +
scale_color_manual(values = c("red","green", "yellow"))+
theme_light()
p + facet_wrap(vars(Gender))
p<- ggplot(data = df, mapping = aes(x = `Age (years)`, y = BMI, color = Blood_Sugar)) +
geom_point() +
labs(title = "BMI by Age", x = "Age", y = "BMI") +
scale_color_manual(values = c("red","green", "yellow"))+
theme_light()
p + facet_wrap(vars(Gender))
p<- ggplot(data = df, mapping = aes(x = `Age (years)`, fill = BMI_Category)) +
geom_density(aes(y=..count..), alpha = 0.5) +
labs(title = "Age by BMI Category", x = "Age") +
scale_fill_manual(values = c("green","red", "yellow"))+
theme_light()
p + facet_wrap(vars(Gender))
p<- ggplot(data = df, mapping = aes(x = `Age (years)`, fill = Blood_Sugar)) +
geom_density(aes(y=..count..), alpha = 0.5) +
labs(title = "Age by Diabetes Criteria", x = "Age") +
scale_fill_manual(values = c("red","green", "yellow"))+
theme_light()
p + facet_wrap(vars(Gender))
#ggsave("/Users/leekapp/Desktop/STAT 235/NHANESproject/plots/age_diab1.pdf")
p<- ggplot(data = df, mapping = aes(x = `Age (years)`, fill = HgB_A1C)) +
geom_density(aes(y=..count..), alpha = 0.5) +
labs(title = "Age by Glycohemoglobin", x = "Age") +
scale_fill_manual(values = c("red","green", "purple", "yellow"))+
theme_light()
p + facet_wrap(vars(Gender))
p<- ggplot(data = df, mapping = aes(x = `Age (years)`, fill = Triglyceride_Level)) +
geom_density(aes(y=..count..), alpha = 0.5) +
labs(title = "Age by Triglyceride Level", x = "Age") +
scale_fill_manual(values = c("yellow","green", "red", "orange", "black"))+
theme_light()
p + facet_wrap(vars(Gender))
p<- ggplot(data = df, mapping = aes(x = `Age (years)`, fill = Hypercholesterolemia)) +
geom_density(aes(y=..count..), alpha = 0.5) +
labs(title = "Age by Cholesterol Level", x = "Age") +
scale_fill_manual(values = c("yellow","green", "red", "orange", "black"))+
theme_light()
p + facet_wrap(vars(Gender))
p<- ggplot(data = df, mapping = aes(x = `Age (years)`, fill = Hypertension)) +
geom_density(aes(y=..count..), alpha = 0.5) +
labs(title = "Age by Blood Pressure", x = "Age") +
scale_fill_manual(values = c("green", "red"))+
theme_light()
p + facet_wrap(vars(Race))
#ggsave("/Users/leekapp/Desktop/STAT 235/NHANESproject/plots/age_sbp1.pdf")
p<- ggplot(data = df, mapping = aes(x = `Age (years)`, fill = Told_Diab_Risk)) +
geom_density(aes(y=..count..), alpha = 0.5) +
labs(title = "Age by Informed of Diabetes Risk", x = "Age") +
scale_fill_manual(values = c("green", "red"))+
theme_light()
p + facet_wrap(vars(Race))
p<- ggplot(data = df, mapping = aes(x = `Age (years)`, fill = Told_Have_Diab)) +
geom_density(aes(y=..count..), alpha = 0.5) +
labs(title = "Age by Diabetes Diagnosis", x = "Age") +
scale_fill_manual(values = c("green", "red"))+
theme_light()
p + facet_wrap(vars(Race))
p<- ggplot(data = df, mapping = aes(x = `Age (years)`, fill = Told_Have_Prediab)) +
geom_density(aes(y=..count..), alpha = 0.5) +
labs(title = "Age by Pre-diabetes Diagnosis", x = "Age") +
scale_fill_manual(values = c("green", "red"))+
theme_light()
p + facet_wrap(vars(Race))
newFDF<-data %>% dplyr::select(Gender, Glycohemoglobin, HgB_A1C, Blood_Sugar, `Insulin (µU/ml)`, BMI, BMI_Category, `Age (years)`, Systolic_BP, Diastolic_BP, `Triglycerides (mg/dL)`, `Cholesterol (mg/dL)`) %>%
filter(BMI_Category != "unknown", BMI_Category != "underweight", Blood_Sugar != "unknown", HgB_A1C != "unknown")
newFDF$Hypertension<-ifelse(newFDF$Systolic_BP > 120 | newFDF$Diastolic_BP > 80, "Yes", "No")
newFDF$Hypertension <- factor(newFDF$Hypertension, levels = c("No", "Yes"))
newFDF<-newFDF %>% filter(!is.na(Hypertension))
## relevel each factor to have "normal" category as baseline
newFDF$HgB_A1C <- factor(newFDF$HgB_A1C, levels = c("prediabetes", "diabetes", "normal"))
newFDF$Blood_Sugar <- factor(newFDF$Blood_Sugar, levels = c("prediabetes", "diabetes", "normal"))
newFDF$BMI_Category <- factor(newFDF$BMI_Category, levels = c("overweight", "obese", "normal"))
newFDF<-newFDF %>% mutate(nA1C = relevel(HgB_A1C, ref = "normal"),
nSugar = relevel(Blood_Sugar, ref = "normal"),
nBMICat = relevel(BMI_Category, ref = "normal"))
newFDF<-newFDF %>% mutate(roundBMI = round(BMI)) ## round BMI top nearest integer
newFDF<-newFDF %>% mutate(roundAge = mround(`Age (years)`, 5)) ## round Age to nearest 5 years
newFDF<-newFDF %>% mutate(roundInsulin = round(`Insulin (µU/ml)`)) ## round insulin to the nearest integer
newFDF<-newFDF %>% mutate(roundSBP = mround(Systolic_BP, 5)) ## round insulin to the nearest 5
View(newFDF)
newDF<-data %>% dplyr::select(Gender, Glycohemoglobin, HgB_A1C, Blood_Sugar, `Insulin (µU/ml)`, BMI, BMI_Category, `Age (years)`, Systolic_BP, Diastolic_BP, `Triglycerides (mg/dL)`, `Cholesterol (mg/dL)`) %>%
filter(BMI_Category != "unknown", BMI_Category != "underweight", `Triglycerides (mg/dL)` < 500, `Cholesterol (mg/dL)` < 300, Glycohemoglobin <12, Blood_Sugar != "unknown", `Insulin (µU/ml)` < 100, HgB_A1C != "unknown")
newDF$Hypertension<-ifelse(newDF$Systolic_BP > 120 | newDF$Diastolic_BP > 80, "Yes", "No")
newDF$Hypertension <- factor(newDF$Hypertension, levels = c("No", "Yes"))
newDF<-newDF %>% filter(!is.na(Hypertension))
## relevel each factor to have "normal" category as baseline
newDF$HgB_A1C <- factor(newDF$HgB_A1C, levels = c("prediabetes", "diabetes", "normal"))
newDF$Blood_Sugar <- factor(newDF$Blood_Sugar, levels = c("prediabetes", "diabetes", "normal"))
newDF$BMI_Category <- factor(newDF$BMI_Category, levels = c("overweight", "obese", "normal"))
newDF<-newDF %>% mutate(nA1C = relevel(HgB_A1C, ref = "normal"),
nSugar = relevel(Blood_Sugar, ref = "normal"),
nBMICat = relevel(BMI_Category, ref = "normal"))
newDF<-newDF %>% mutate(roundBMI = round(BMI)) ## round BMI top nearest integer
newDF<-newDF %>% mutate(roundAge = mround(`Age (years)`, 5)) ## round Age to nearest 5 years
newDF<-newDF %>% mutate(roundInsulin = round(`Insulin (µU/ml)`)) ## round insulin to the nearest integer
newDF<-newDF %>% mutate(roundSBP = mround(Systolic_BP, 5)) ## round insulin to the nearest 5
View(newFDF)
set.seed(3)
index <- sample(1:nrow(newFDF), nrow(newFDF)/5)
train <- newDF[index, ]
test <- newDF[-index, ]
htnNull<-glm(Hypertension ~ 1, data = train, family = "binomial")
summary(htnNull)
htnChol<-glm(Hypertension ~ `Cholesterol (mg/dL)`, data = train, family = "binomial")
summary(htnChol)
htnTrig<-glm(Hypertension ~ `Triglycerides (mg/dL)`, data = train, family = "binomial")
summary(htnTrig)
htnGlyc<-glm(Hypertension ~ Glycohemoglobin, data = train, family = "binomial")
summary(htnGlyc)
htnBMI<-glm(Hypertension ~ BMI, data = train, family = "binomial")
summary(htnBMI)
htnAge<-glm(Hypertension ~ `Age (years)`, data = train, family = "binomial")
summary(htnAge)
##is the least accurate single predictor model better than the null model?
anova(htnNull, htnChol, test="Chisq")
set.seed(3)
index <- sample(1:nrow(newDF), nrow(newDF)/5)
train <- newDF[index, ]
test <- newDF[-index, ]
htnNull<-glm(Hypertension ~ 1, data = train, family = "binomial")
summary(htnNull)
htnChol<-glm(Hypertension ~ `Cholesterol (mg/dL)`, data = train, family = "binomial")
summary(htnChol)
htnTrig<-glm(Hypertension ~ `Triglycerides (mg/dL)`, data = train, family = "binomial")
summary(htnTrig)
htnGlyc<-glm(Hypertension ~ Glycohemoglobin, data = train, family = "binomial")
summary(htnGlyc)
htnBMI<-glm(Hypertension ~ BMI, data = train, family = "binomial")
summary(htnBMI)
htnAge<-glm(Hypertension ~ `Age (years)`, data = train, family = "binomial")
summary(htnAge)
##is the least accurate single predictor model better than the null model?
anova(htnNull, htnChol, test="Chisq")
nullMod<-glm(Hypertension ~ 1, family = "binomial", data = newDF)
fullMod<-glm(Hypertension ~ BMI + Glycohemoglobin + `Age (years)` + `Cholesterol (mg/dL)` + `Triglycerides (mg/dL)`, family = "binomial", data = newDF)
stepHtnF <- step(nullMod, direction = "both", trace = 0,
scope = list(lower = formula(nullMod), upper = formula(fullMod)))
stepHtnB <- step(fullMod, direction = "both", trace = 0,
scope = list(lower = formula(nullMod), upper = formula(fullMod)))
stepHtnF
stepHtnB
#selecting training and test datasets
set.seed(3)
index <- sample(1:nrow(newDF), nrow(newDF)/5)
train <- newDF[index, ]
test <- newDF[-index, ]
#First finding models with varying numbers of predictors based on training data
#Best subset selection
regfitHtn<-regsubsets(Hypertension ~ BMI + Glycohemoglobin + `Age (years)` + `Cholesterol (mg/dL)` + `Triglycerides (mg/dL)`, data = train)
reg.summ<-summary(regfitHtn)
# Plot RSS, adjusted r-square, Cp, BIC for all the models at once
# RSS Plot
plot(reg.summ$rss, xlab = "Number of Variables", ylab = "RSS", type = "l")
title("Residual sum of squares by number of predictors")
# Adjusted RSq plot
plot(reg.summ$adjr2, xlab = "Number of Variables", ylab = "Adjusted RSq",
type = "l")
title(expression("Adjusted R"^2* " by number of predictors"))
# BIC plot
plot(reg.summ$bic, xlab = "Number of Variables", ylab = "BIC", type = "l") ## min bic with 2 predictors
title("BIC by number of predictors")
# Plotting built into regsubsets()
plot(regfitHtn, scale = "r2")
plot(regfitHtn, scale = "adjr2") ## max occurs with the 4 predictor model
plot(regfitHtn, scale = "Cp")
plot(regfitHtn, scale = "bic") ## min occurs with the 2 predictor model
coef(regfitHtn, 2) #glycohemoglobin and age
coef(regfitHtn, 4) # BMI + cholesterol + glycohemoglobin + age
mod2<-glm(Hypertension ~ Glycohemoglobin + `Age (years)`, family = "binomial", data = train)
mod4<-glm(Hypertension ~ BMI + Glycohemoglobin + `Age (years)` + `Cholesterol (mg/dL)`, family = "binomial", data = train)
summary(mod2)
summary(mod4)
anova(htnAge, mod2, test="Chisq")
nullPreds<-predict(htnNull, test, type = "response")
nullCall = ifelse(nullPreds > 0.5, "Yes", "No")
null_cm <- table(actual_htn = test$Hypertension, predicted_htn = nullCall)
null_cm
#correct call rate
print(paste("The single predictor model has a test accuracy of ", round(sum(diag(null_cm)/sum(null_cm)), 4)))
cholPreds<-predict(htnChol, test, type = "response")
cholCall = ifelse(cholPreds > 0.5, "Yes", "No")
chol_cm <- table(actual_htn = test$Hypertension, predicted_htn = cholCall)
chol_cm
#correct call rate
print(paste("The single predictor model has a test accuracy of ", round(sum(diag(chol_cm)/sum(chol_cm)), 4)))
trigPreds<-predict(htnTrig, test, type = "response")
trigCall = ifelse(trigPreds > 0.5, "Yes", "No")
trig_cm <- table(actual_htn = test$Hypertension, predicted_htn = trigCall)
trig_cmY
nullPreds<-predict(htnNull, test, type = "response")
nullCall = ifelse(nullPreds > 0.5, "Yes", "No")
null_cm <- table(actual_htn = test$Hypertension, predicted_htn = nullCall)
null_cm
#correct call rate
print(paste("The single predictor model has a test accuracy of ", round(sum(diag(null_cm)/sum(null_cm)), 4)))
cholPreds<-predict(htnChol, test, type = "response")
cholCall = ifelse(cholPreds > 0.5, "Yes", "No")
chol_cm <- table(actual_htn = test$Hypertension, predicted_htn = cholCall)
chol_cm
#correct call rate
print(paste("The single predictor model has a test accuracy of ", round(sum(diag(chol_cm)/sum(chol_cm)), 4)))
trigPreds<-predict(htnTrig, test, type = "response")
trigCall = ifelse(trigPreds > 0.5, "Yes", "No")
trig_cm <- table(actual_htn = test$Hypertension, predicted_htn = trigCall)
trig_cm
#correct call rate
print(paste("The single predictor model has a test accuracy of ", round(sum(diag(trig_cm)/sum(trig_cm)), 4)))
glycPreds<-predict(htnGlyc, test, type = "response")
glycCall = ifelse(glycPreds > 0.5, "Yes", "No")
glyc_cm <- table(actual_htn = test$Hypertension, predicted_htn = glycCall)
glyc_cm
#correct call rate
print(paste("The single predictor model has a test accuracy of ", round(sum(diag(glyc_cm)/sum(glyc_cm)), 4)))
bmiPreds<-predict(htnBMI, test, type = "response")
bmiCall = ifelse(bmiPreds > 0.5, "Yes", "No")
bmi_cm <- table(actual_htn = test$Hypertension, predicted_htn = bmiCall)
bmi_cm
#correct call rate
print(paste("The single predictor model has a test accuracy of ", round(sum(diag(bmi_cm)/sum(bmi_cm)), 4)))
agePreds<-predict(htnAge, test, type = "response")
ageCall = ifelse(agePreds > 0.5, "Yes", "No")
age_cm <- table(actual_htn = test$Hypertension, predicted_htn = ageCall)
age_cm
#correct call rate
print(paste("The single predictor model has a test accuracy of ", round(sum(diag(age_cm)/sum(age_cm)), 4)))
#Obtaining test accuracy from selected models
htnPreds2<-predict(mod2, test, type = "response")
htnCall2 = ifelse(htnPreds2 > 0.5, "Yes", "No")
htn2_cm <- table(actual_htn = test$Hypertension, predicted_htn = htnCall2)
htn2_cm
#correct call rate
print(paste("The two predictor model has a test accuracy of ", round(sum(diag(htn2_cm)/sum(htn2_cm)), 4))) #69.65%
htnPreds4<-predict(mod4, test, type = "response")
htnCall4 = ifelse(htnPreds4 > 0.5, "Yes", "No")
htn4_cm <- table(actual_htn = test$Hypertension, predicted_htn = htnCall4)
htn4_cm
#correct call rate
print(paste("The four predictor model has a test accuracy of ", round(sum(diag(htn4_cm)/sum(htn4_cm)), 4)))
## using vglm
sugar_vglm<-vglm(Blood_Sugar~Glycohemoglobin, data = newDF, family = multinomial)
summary(sugar_vglm)
## using multinom()
sugar_nnet<-multinom(nSugar~Glycohemoglobin, data = newDF)
summary(sugar_nnet)
groupedSugar<- newDF %>%filter(Glycohemoglobin > 4.7 & Glycohemoglobin < 7.7) %>%   group_by(Glycohemoglobin) %>%
summarize(sugarCount = n(),
prediabetes = sum(Blood_Sugar == "prediabetes"),
diabetes = sum(Blood_Sugar == "diabetes"),
normal = sum(Blood_Sugar == "normal"))
sugar_vglm_wide<-vglm(cbind(prediabetes, diabetes, normal) ~ Glycohemoglobin, family = "multinomial", data = groupedSugar)
summary(sugar_vglm_wide)
sugar_group_nnet <- multinom(cbind(normal, prediabetes, diabetes) ~ Glycohemoglobin, data = groupedSugar)
summary(sugar_group_nnet)
#effects on the odds ratio for prediabetes/diabetes vs normal
exp(coef(sugar_nnet))
#Filtering for glycohemoglobin just above normal cutoff
sugar_count <- groupedSugar %>% filter(Glycohemoglobin == 5.8) %>%
dplyr::select(prediabetes:normal)
sugar_count
newDF %>% ggplot(aes(x = Glycohemoglobin, fill=Blood_Sugar)) + geom_vline(xintercept=5.8) +
geom_density(aes(y=..count..), alpha=0.5) + theme_bw()+
scale_fill_manual(values = c("yellow","red","green"))+
labs(title="Blood Sugar Classification Density Plot When Glycohemoglobin is 5.8",
x= "Hemoglobin A1C") + scale_x_continuous(limits = c(4.8,7.6))
df<-newDF %>% filter(Glycohemoglobin > 4.7 & Glycohemoglobin < 7.7) #have to match dimensions of data frame for the fit
predSugar<-predict(sugar_nnet, df)
sugar_cm<-table(actual_sugar = df$nSugar, predicted_sugar = predSugar)
sugar_cm
prop.table(sugar_cm,margin = 1)
#correct call rate
print(paste("The single predictor model has a test accuracy of ", round(sum(diag(sugar_cm)/sum(sugar_cm)), 4)))
## adding age to the model
sugar_age_vglm<-vglm(Blood_Sugar~Glycohemoglobin + `Age (years)`, data = newDF, family = multinomial)
summary(sugar_age_vglm)
## using multinom()
sugar_age_nnet<-multinom(nSugar~Glycohemoglobin + `Age (years)`, data = newDF)
summary(sugar_age_nnet)
groupedSugar<- newDF %>%  group_by(Glycohemoglobin,`Age (years)`) %>%
summarize(sugarCount = n(),
prediabetes = sum(Blood_Sugar == "prediabetes"),
diabetes = sum(Blood_Sugar == "diabetes"),
normal = sum(Blood_Sugar == "normal"))
sugar_age_wide<-vglm(cbind(prediabetes, diabetes, normal) ~ Glycohemoglobin + `Age (years)`, family = "multinomial", data = groupedSugar)
summary(sugar_age_wide)
sugar_age_group <- multinom(cbind(normal, prediabetes, diabetes) ~ Glycohemoglobin + `Age (years)`, data = groupedSugar)
summary(sugar_age_group)
#effects on the odds ratio for prediabetes/diabetes vs normal
exp(coef(sugar_age_group))
predSugar<-predict(sugar_age_nnet, newDF)
sugar_cm<-table(actual_sugar = newDF$nSugar, predicted_sugar = predSugar)
sugar_cm
#correct call rate
print(paste("The two predictor model has a test accuracy of ", round(sum(diag(sugar_cm)/sum(sugar_cm)), 4)))
### Test using the likelihoods with and without Log_distance
anova(sugar_nnet, sugar_age_nnet, test="Chisq") ## p-val is 6.25e-11
sugar_trig_vglm<- vglm(Blood_Sugar~`Triglycerides (mg/dL)`, data = newDF, family = multinomial)
summary(sugar_trig_vglm)
## using multinom()
sugar_trig_nnet<-multinom(nSugar~`Triglycerides (mg/dL)`, data = newDF)
summary(sugar_trig_nnet)
#effects on the odds ratio for prediabetes/diabetes vs normal
exp(coef(sugar_trig_nnet))
predsugar_trig<-predict(sugar_trig_nnet, newDF)
bmi_cm<-table(actual_bmi = newDF$nSugar, predicted_bmi = predsugar_trig)
bmi_cm
#correct call rate
print(paste("The single predictor model has a test accuracy of ", round(sum(diag(bmi_cm)/sum(bmi_cm)), 4))) ## normal never predicted
sugar_GT_vglm<- vglm(Blood_Sugar~Glycohemoglobin + `Triglycerides (mg/dL)`, data = newDF, family = multinomial)
summary(sugar_GT_vglm)
## using multinom()
sugar_GT_nnet<-multinom(nSugar~Glycohemoglobin + `Triglycerides (mg/dL)`, data = newDF)
summary(sugar_GT_nnet)
#effects on the odds ratio for prediabetes/diabetes vs normal
exp(coef(sugar_GT_nnet))
predGT<-predict(sugar_GT_nnet, newDF)
bmi_cm<-table(actual_sugar = newDF$nSugar, predicted_sugar = predGT)
bmi_cm
#correct call rate
print(paste("The two predictor model has a test accuracy of ", round(sum(diag(bmi_cm)/sum(bmi_cm)), 4))) ## normal never predicted
### Test using the likelihoods with and without Log_distance
anova(sugar_nnet, sugar_GT_nnet, test="Chisq") ## 5.97e-12
bmi_age_vglm<- vglm(BMI_Category~`Age (years)`, data = newDF, family = multinomial)
summary(bmi_age_vglm)
## using multinom()
bmi_age_nnet<-multinom(nBMICat~`Age (years)`, data = newDF)
summary(bmi_age_nnet)
groupedBMI<- newDF %>%   group_by(roundAge) %>%
summarize(BMICount = n(),
overweight = sum(nBMICat == "overweight"),
obese = sum(nBMICat == "obese"),
normal = sum(nBMICat == "normal"))
bmi_vglm_wide<-vglm(cbind(overweight, obese, normal) ~ roundAge, family = "multinomial", data = groupedBMI)
summary(bmi_vglm_wide)
bmi_group_nnet <- multinom(cbind(normal, overweight, obese) ~ roundAge, data = groupedBMI)
summary(bmi_group_nnet)
#effects on the odds ratio for prediabetes/diabetes vs normal
exp(coef(bmi_age_nnet))
predBMI<-predict(bmi_group_nnet, newDF)
bmi_cm<-table(actual_bmi = newDF$nBMICat, predicted_bmi = predBMI)
bmi_cm
#correct call rate
print(paste("The single predictor model has a test accuracy of ", round(sum(diag(bmi_cm)/sum(bmi_cm)), 4))) ## normal never predicted but the grouped fit is much better than the ungrouped fit
bmi_ins_vglm<- vglm(BMI_Category~`Insulin (µU/ml)`, data = newDF, family = multinomial)
summary(bmi_ins_vglm)
## using multinom()
bmi_ins_nnet<-multinom(nBMICat~`Insulin (µU/ml)`, data = newDF)
summary(bmi_ins_nnet)
groupedBMI_ins<- newDF %>%   group_by(roundInsulin) %>%
summarize(BMICount = n(),
overweight = sum(nBMICat == "overweight"),
obese = sum(nBMICat == "obese"),
normal = sum(nBMICat == "normal"))
bmi_ins_wide<-vglm(cbind(overweight, obese, normal) ~ roundInsulin, family = "multinomial", data = groupedBMI_ins)
summary(bmi_ins_wide)
bmi_ins_group_nnet <- multinom(cbind(normal, overweight, obese) ~ roundInsulin, data = groupedBMI_ins)
summary(bmi_ins_group_nnet)
#effects on the odds ratio for prediabetes/diabetes vs normal
exp(coef(bmi_ins_nnet))
predBMI_ins<-predict(bmi_ins_nnet, newDF)
bmi_cm<-table(actual_bmi = newDF$nBMICat, predicted_bmi = predBMI)
bmi_cm
#correct call rate
print(paste("The two predictor model has a test accuracy of ", round(sum(diag(bmi_cm)/sum(bmi_cm)), 4))) ## normal never predicted
bmi_SBP_vglm<- vglm(BMI_Category~Systolic_BP, data = newDF, family = multinomial)
summary(bmi_SBP_vglm)
## using multinom()
bmi_SBP_nnet<-multinom(nBMICat~Systolic_BP, data = newDF)
summary(bmi_SBP_nnet)
groupedBMI_SBP<- newDF %>%   group_by(roundSBP) %>%
summarize(BMICount = n(),
overweight = sum(nBMICat == "overweight"),
obese = sum(nBMICat == "obese"),
normal = sum(nBMICat == "normal"))
bmi_SBP_wide<-vglm(cbind(overweight, obese, normal) ~ roundSBP, family = "multinomial", data = groupedBMI_SBP)
summary(bmi_SBP_wide)
bmi_SBP_group_nnet <- multinom(cbind(normal, overweight, obese) ~ roundSBP, data = groupedBMI_SBP)
summary(bmi_SBP_group_nnet)
#effects on the odds ratio for prediabetes/diabetes vs normal
exp(coef(bmi_SBP_nnet))
#Filtering for SBP just above normal cutoff
BMI_count <- groupedBMI_SBP %>% filter(roundSBP == 125) %>%
dplyr::select(overweight:normal)
BMI_count
newDF %>% ggplot(aes(x = Systolic_BP, fill=BMI_Category)) + geom_vline(xintercept=125) +
geom_density(aes(y=..count..), alpha=0.5) + theme_bw()+
scale_fill_manual(values = c("yellow","red","green"))+
labs(title="BMI Classification Density Plot When Systolic BP is 125",
x= "Systolic BP")
predBMI_SBP<-predict(bmi_SBP_group_nnet, groupedBMI_SBP)
bmi_cm<-table(actual_bmi = newDF$nBMICat, predicted_bmi = predBMI)
bmi_cm
#correct call rate
print(paste("The two predictor model has a test accuracy of ", round(sum(diag(bmi_cm)/sum(bmi_cm)), 4))) ## normal never predicted
## removing normal
sum(diag(bmi_cm[-1,-1]))/sum(bmi_cm[-1,-1]) ## 56.17%
bmi_glyc_vglm<- vglm(BMI_Category~Glycohemoglobin, data = newDF, family = multinomial)
summary(bmi_glyc_vglm)
## using multinom()
bmi_glyc_nnet<-multinom(nBMICat~Glycohemoglobin, data = newDF)
summary(bmi_glyc_nnet)
groupedBMI_glyc<- newDF %>%   group_by(Glycohemoglobin) %>%
summarize(BMICount = n(),
overweight = sum(nBMICat == "overweight"),
obese = sum(nBMICat == "obese"),
normal = sum(nBMICat == "normal"))
bmi_glyc_wide<-vglm(cbind(overweight, obese, normal) ~ Glycohemoglobin, family = "multinomial", data = groupedBMI_glyc)
summary(bmi_glyc_wide)
bmi_glyc_group_nnet <- multinom(cbind(normal, overweight, obese) ~ Glycohemoglobin, data = groupedBMI_glyc)
summary(bmi_glyc_group_nnet)
#effects on the odds ratio for prediabetes/diabetes vs normal
exp(coef(bmi_glyc_nnet))
#Filtering for SBP just above normal cutoff
BMI_count <- groupedBMI_glyc %>% filter(Glycohemoglobin == 5.8) %>%
dplyr::select(overweight:normal)
BMI_count
newDF %>% ggplot(aes(x = Glycohemoglobin, fill=BMI_Category)) + geom_vline(xintercept=5.8) +
geom_density(aes(y=..count..), alpha=0.5) + theme_bw()+
scale_fill_manual(values = c("yellow","red","green"))+
labs(title="BMI Classification Density Plot When Glycohemoglobin is 5.8",
x= "Hemoglobin A1C")
predBMI_glyc<-predict(bmi_glyc_nnet, newDF)
bmi_cm<-table(actual_bmi = newDF$nBMICat, predicted_bmi = predBMI_glyc)
bmi_cm
#correct call rate
print(paste("The single predictor model has a test accuracy of ", round(sum(diag(bmi_cm)/sum(bmi_cm)), 4))) ## normal never predicted
## removing overweight category since it's never predicted
round(sum(diag(bmi_cm[-2,-2]))/sum(bmi_cm[-2,-2]), 4) ##64.2% accuracy
bmi_trig_vglm<- vglm(BMI_Category~`Triglycerides (mg/dL)`, data = newDF, family = multinomial)
summary(bmi_trig_vglm)
## using multinom()
bmi_trig_nnet<-multinom(nBMICat~`Triglycerides (mg/dL)`, data = newDF)
summary(bmi_trig_nnet)
#effects on the odds ratio for prediabetes/diabetes vs normal
exp(coef(bmi_trig_nnet))
predBMI_trig<-predict(bmi_trig_nnet, newDF)
bmi_cm<-table(actual_bmi = newDF$nBMICat, predicted_bmi = predBMI_trig)
bmi_cm
#correct call rate
print(paste("The single predictor model has a test accuracy of ", round(sum(diag(bmi_cm)/sum(bmi_cm)), 4))) ## normal never predicted
## removing overweight category since it's never predicted
round(sum(diag(bmi_cm[-2,-2]))/sum(bmi_cm[-2,-2]), 4) ##66.4% accuracy
#df<-data %>% filter(`Insulin (µU/ml)`< 100, BMI_Category != "unknown", BMI_Category != "underweight")
p<- ggplot(data = newDF, mapping = aes(x = `Insulin (µU/ml)`, fill = Blood_Sugar)) +
geom_density(aes(y=..count..), alpha = 0.5) +
labs(title = "Insulin by Diabetes Criteria", x = "Insulin (µU/ml)") +
scale_fill_manual(values = c("yellow","red", "green"))+
theme_light()
p + facet_wrap(vars(Gender))
p<- ggplot(data = newDF, mapping = aes(x = `Insulin (µU/ml)`, fill = BMI_Category)) +
geom_density(aes(y=..count..), alpha = 0.5) +
labs(title = "Insulin by BMI Category", x = "Insulin (µU/ml)") +
scale_fill_manual(values = c("yellow","red", "green"))+
theme_light()
p + facet_wrap(vars(Gender))
#ggsave("/Users/leekapp/Desktop/STAT 235/NHANESproject/plots/bmiIns.pdf", width = 10, height = 8, units = "in")
bmi_ins_vglm<- vglm(BMI_Category~`Insulin (µU/ml)`, data = newDF, family = multinomial)
summary(bmi_ins_vglm)
## using multinom()
bmi_ins_nnet<-multinom(nBMICat~`Insulin (µU/ml)`, data = newDF)
summary(bmi_ins_nnet)
#effects on the odds ratio for prediabetes/diabetes vs normal
exp(coef(bmi_ins_nnet))
predBMI_ins<-predict(bmi_ins_nnet, newDF)
bmi_cm<-table(actual_bmi = newDF$nBMICat, predicted_bmi = predBMI_ins)
bmi_cm
#correct call rate
print(paste("The single predictor model has a test accuracy of ", round(sum(diag(bmi_cm)/sum(bmi_cm)), 4)))
bmi_IT_vglm<- vglm(BMI_Category~`Insulin (µU/ml)` + `Triglycerides (mg/dL)`, data = newDF, family = multinomial)
summary(bmi_IT_vglm)
## using multinom()
bmi_IT_nnet<-multinom(nBMICat~`Insulin (µU/ml)` + `Triglycerides (mg/dL)`, data = newDF)
summary(bmi_IT_nnet)
#effects on the odds ratio for prediabetes/diabetes vs normal
exp(coef(bmi_IT_nnet))
predBMI_IT<-predict(bmi_IT_nnet, newDF)
bmi_cm<-table(actual_bmi = newDF$nBMICat, predicted_bmi = predBMI_IT)
bmi_cm
#correct call rate
print(paste("The single predictor model has a test accuracy of ", round(sum(diag(bmi_cm)/sum(bmi_cm)), 4)))
### Test using the likelihoods with and without Triglycerides
anova(bmi_ins_nnet, bmi_IT_nnet, test="Chisq")
bmi_IG_vglm<- vglm(BMI_Category~`Insulin (µU/ml)` + Glycohemoglobin, data = newDF, family = multinomial)
summary(bmi_IG_vglm)
## using multinom()
bmi_IG_nnet<-multinom(nBMICat~`Insulin (µU/ml)` + Glycohemoglobin, data = newDF)
summary(bmi_IG_nnet)
#effects on the odds ratio for prediabetes/diabetes vs normal
exp(coef(bmi_IG_nnet))
predBMI_IG<-predict(bmi_IG_nnet, newDF)
bmi_cm<-table(actual_bmi = newDF$nBMICat, predicted_bmi = predBMI_IG)
bmi_cm
#correct call rate
print(paste("The single predictor model has a test accuracy of ", round(sum(diag(bmi_cm)/sum(bmi_cm)), 4)))
### Test using the likelihoods with and without Triglycerides
anova(bmi_ins_nnet, bmi_IG_nnet, test="Chisq")
